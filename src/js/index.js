const EMOJIS = ["ü•î", "üçí", "ü•ë", "üåΩ", "ü•ï", "üçá", "üçâ", "üçå", "ü•≠", "üçç"];

/**
 * –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
 * @property {HTMLElement} boardContainer - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
 * @property {HTMLElement} board - –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
 * @property {HTMLElement} moves - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–¥–æ–≤.
 * @property {HTMLElement} timer - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
 * @property {HTMLButtonElement} start - –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.
 * @property {HTMLElement} win - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ.
 */

const SELECTORS = {
  boardContainer: document.querySelector(".board-container"),
  board: document.querySelector(".board"),
  moves: document.querySelector(".moves"),
  timer: document.querySelector(".timer"),
  start: document.querySelector("button"),
  win: document.querySelector(".win"),
};

/**
 * –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
 * @property {boolean} isGameStarted- –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞.
 * @property {number} flippedCards - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ.
 * @property {number} totalFlips - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤.   * * @property {number} totalTime - –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã.
 * @property {number} loop - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
 */

const STATE = {
  isGameStarted: false,
  flippedCards: 0,
  totalFlips: 0,
  totalTime: 0,
  loop: null,
};

/**
 *
 * @param {strings[]} items - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
 * @returns {strings[]} - –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏.
 */

function shuffleAndPickRandom(items) {
  if (!items && Array.isArray(items)) {
    throw new Error("–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç–º–æ–¥–∑–∏ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞!");
  }
  
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const sortedArr = items.sort(() => Math.random(items) - 0.5);

    // –î–æ—Å—Ç–∞–µ–º –∏–∑ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–≤—ã–µ 8
    const dublicateArr = [...sortedArr].slice(0, 8);

    // –ò–∑ –º–∞—Å—Å–∏–≤–∞ –≤ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–µ–ª–∞–µ–º 16
    const doubleArr = [...dublicateArr, ...dublicateArr];

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –∏–∑ 16 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const sortedDoubleArr = doubleArr.sort(() => Math.random(doubleArr) - 0.5);

    return sortedDoubleArr;
  } 

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
 */
const generateGame = () => {
  //–ü–æ–ª—É—á–µ–Ω–∏–µ data –∞—Ç—Ä–∏–±—É—Ç–∞
  const dimensions = SELECTORS.board.dataset.dimension;

  if (dimensions % 2 !== 0) 
    throw new Error("–†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–Ω—ã–º!");

  //–í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —ç–º–æ–¥–∑–∏
  const shuffleAndPickEmoji = shuffleAndPickRandom(EMOJIS);

  // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
  const cardsHTML = shuffleAndPickEmoji
    .map((emoji) => {
      return `
        <div class ="card">
           <div class ="card-front"></div>
           <div class="card-back">${emoji}</div>
        </div>`;
    })
    .join("");

  // –í—Å—Ç–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  SELECTORS.board.insertAdjacentHTML("beforeend", cardsHTML);
};

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É.
 */
const startGame = () => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã.
  STATE.isGameStarted = true;

  //–û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.
  SELECTORS.start.classList.add("disabled");

  //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä–µ–º—è –∏–≥—Ä—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.
  STATE.loop = setInterval(() => {
    //–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É.
    STATE.totalTime++;

    //–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–∞—Ö –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
    SELECTORS.moves.innerText = `${STATE.totalFlips} —Ö–æ–¥–æ–≤`;
    SELECTORS.timer.innerText = `–≤—Ä–µ–º—è ${STATE.totalTime} —Å–µ–∫`;
  }, 1000);
};

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π—Ç–∞.
 * @param {HTMLElement} card - –ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è.
 */
const mainCardActions = card => {
  !STATE.isGameStarted && startGame(); // –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É.

  canFlip() && flip(card); // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.

  increaseFlipCount(); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç –∏ –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤.

  isSecondCardFlipped() && checkMatch(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é).

  isGameWon() && displayWinMessage(); // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª, –æ—Ç–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ.
};

/**
 * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç –∏ –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤.
 */
const increaseFlipCount = () => {
  STATE.flippedCards++;
  STATE.totalFlips++;
};

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç.
 */
const resetFlipCount = () => STATE.flippedCards = 0;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –Ω–µ—Ç.
 * @returns {boolean} - –î–∞/–Ω–µ—Ç.
 */
const canFlip = () => STATE.flippedCards <=2;

/**
 * –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É.
 * @param {HTMLElement} card - –ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è.
 */
const flip = (card) => card.classList.add("flipped");

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏ –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ –∏–ª–∏ –Ω–µ—Ç.
 * @returns {boolean} - –î–∞/–Ω–µ—Ç.
 */
const isSecondCardFlipped = () => STATE.flippedCards === 2;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç.
 */
const checkMatch = () => {
  const flippedCards = document.querySelectorAll(".flipped:not(.matched)");

  if (flippedCards[0].innerText === flippedCards[1].innerText) {
    markMatched(flippedCards);
  } else {
    setTimeout(() => {
      flipBack(); //–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤—Å–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–≤–ø–∞–ª–∏.
    }, 1000);
  }
};

/**
 * –û—Ç–º–µ—á–∞–µ—Ç –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –∫–∞–∫ —Å–æ–≤–ø–∞–≤—à–∏–µ.
 * @param {NodeList} cards - –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–ª–∏.
 */
const markMatched = (cards) => {
  cards.forEach(card => card.classList.add("matched"));

  STATE.flippedCards === 2 && resetFlipCount(); //–ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≤–ø–∞–ª–∏, –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫.
};

/**
 * –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤—Å–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–≤–ø–∞–ª–∏, –æ–±–Ω—É–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫.
 */
const flipBack = () => {
  const unmatchedCards = document.querySelectorAll(".card:not(.matched)");

  unmatchedCards.forEach((card) => card.classList.remove("flipped"));

  STATE.flippedCards = 0;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä–æ–∫ –∏–ª–∏ –Ω–µ—Ç.
 * @returns {boolean} - True, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª, –∏–Ω–∞—á–µ False.
 */
const isGameWon = () =>
!document.querySelectorAll(".card:not(.flipped)").length;

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ.
 */
const displayWinMessage = () => {
  setTimeout(() => {
    SELECTORS.boardContainer.classList.add("flipped");
    SELECTORS.win.innerHTML = `
    <span class="win-text">
    –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!<br/>
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: <span class="highlight">${STATE.totalFlips}</span><br/>
    –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: <span class="highlight">${STATE.totalTime}</span> —Å–µ–∫—É–Ω–¥
     </span>
     `;

     clearInterval(STATE.loop);
  }, 1000);
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ.
 * @param {Event} event - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è click/
 */
const handleClick = (event) => {
  //–ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å —Å–æ–±—ã—Ç–∏—è (—ç–ª–µ–º–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–∏–∑–æ—à–µ–ª –∫–ª–∏–∫) –∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç.
  const eventTarget = event.target;
  const eventParent = eventTarget.parentElement;

  //–¶–µ–ª—å —Å–æ–±—ã—Ç–∏—è —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å –∫–ª–∞—Å—Å–æ–º "card" –∏ –æ–Ω –µ—â–µ –Ω–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç.
  const hasCardClassAndNotFlipped = eventParent.classList.contains("card") && !eventParent.classList.contains("flipped");

  hasCardClassAndNotFlipped && mainCardActions(eventParent);

  //–¶–µ–ª—å —Å–æ–±—ã—Ç–∏—è —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–æ–π "button" –∏ –æ–Ω–∞ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞.
  const isInitializedGame = eventTarget.nodeName === "BUTTON" && !eventTarget.classList.contains("disabled");

  isInitializedGame && startGame();
};

/**
 * –í—ã–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 */
document.addEventListener("DOMContentLoaded", () => {
  generateGame(); //–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è –∏–≥—Ä—ã
  document.addEventListener("click", handleClick); //–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π.
});